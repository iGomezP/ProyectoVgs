import { Component, Inject, OnInit } from '@angular/core';
import {
  MSAL_GUARD_CONFIG,
  MsalBroadcastService,
  MsalGuardConfiguration,
  MsalService,
} from '@azure/msal-angular';
import {
  AuthenticationResult,
  EventMessage,
  EventType,
  InteractionStatus,
  InteractionType,
  PopupRequest,
  RedirectRequest,
  SsoSilentRequest,
} from '@azure/msal-browser';
import {
  faCartShopping,
  faCircleXmark,
  faRightToBracket,
  faRightFromBracket,
  faUserPlus,
  faUserPen,
} from '@fortawesome/free-solid-svg-icons';
import { Subject, filter, takeUntil } from 'rxjs';
import { b2cPolicies, silentRequest } from 'src/app/config/msalAuth.config';

@Component({
  selector: 'app-user-buttons',
  templateUrl: './user-buttons.component.html',
  styleUrls: ['./user-buttons.component.scss'],
})
export class UserButtonsComponent implements OnInit {
  faIcons = {
    close: faCircleXmark,
    userLogin: faRightToBracket,
    userLogout: faRightFromBracket,
    userRegister: faUserPlus,
    userEdit: faUserPen,
    cart: faCartShopping,
  };
  isIframe = false;
  sidebarUser: boolean = false;
  loginDisplay = false;
  private readonly _destroying$ = new Subject<void>();

  constructor(
    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,
    private authService: MsalService,
    private msalBroadcastService: MsalBroadcastService
  ) {}

  ngOnInit(): void {
    const silentRequestComp: SsoSilentRequest = silentRequest;

    this.authService.ssoSilent(silentRequestComp).subscribe({
      next: (result: AuthenticationResult) => {
        console.log('SsoSilent succeeded!');
        console.log(result);
      },
      error: (err) => {
        this.authService.loginRedirect();
      },
    });

    this.msalBroadcastService.msalSubject$
      .pipe(
        filter(
          (msg: EventMessage) => msg.eventType === EventType.LOGIN_SUCCESS
        ),
        takeUntil(this._destroying$)
      )
      .subscribe((result: EventMessage) => {
        // do something with the result, such as accessing ID token
      });

    // this.msalBroadcastService.inProgress$
    //   .pipe(
    //     filter(
    //       (status: InteractionStatus) => status === InteractionStatus.None
    //     ),
    //     takeUntil(this._destroying$)
    //   )
    //   .subscribe(() => {
    //     this.setLoginDisplay();
    //   });
  }

  login() {
    if (this.msalGuardConfig.interactionType === InteractionType.Popup) {
      if (this.msalGuardConfig.authRequest) {
        this.authService
          .loginPopup({ ...this.msalGuardConfig.authRequest } as PopupRequest)
          .subscribe((response: AuthenticationResult) => {
            console.log(response);
            this.authService.instance.setActiveAccount(response.account);
          });
      } else {
        this.authService
          .loginPopup()
          .subscribe((response: AuthenticationResult) => {
            this.authService.instance.setActiveAccount(response.account);
          });
      }
    } else {
      if (this.msalGuardConfig.authRequest) {
        this.authService.loginRedirect({
          ...this.msalGuardConfig.authRequest,
        } as RedirectRequest);
      } else {
        this.authService.loginRedirect();
      }
    }
  }

  logout() {
    this.authService.logoutRedirect({
      postLogoutRedirectUri: 'http://localhost:4200',
    });
  }

  setLoginDisplay() {
    this.loginDisplay = this.authService.instance.getAllAccounts().length > 0;
  }

  editProfile() {
    let editProfileFlowRequest: RedirectRequest | PopupRequest = {
      authority: b2cPolicies.authorities.editProfile.authority,
      scopes: [],
    };
    this.login();
  }

  ngOnDestroy(): void {
    this._destroying$.next(undefined);
    this._destroying$.complete();
  }
}
